=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#inventory-manager
=end

custom_require.call(%w[common common-arcana common-items])

class InventoryManager
  def initialize
    @active_character = Char.name.to_sym
    @item_db_path = "data/inventory.yaml"

    arg_definitions = [
      [
        { name: 'count', regex: /(check|count)/i, description: "Counts inventory items. Doesn't check inside closed containers." },
        { name: 'desc', regex: /\w+/i, optional: true, description: "Optional specific count by description. Use quotes for multiple word strings, i.e., \"purple pouch\"." },
        { name: 'player', regex: /\w+/, optional: true, description: 'Optional character name from which to source inventory information' }
      ],
      [
        { name: 'save', regex: /save/i, description: "Save new or update current character's items to the database." },
        { name: 'vault_book', regex: /vault_book/i, optional: true, description: "Retrieves, reads, and save from vault book." },
        { name: 'vault_regular', regex: /vault_regular/i, optional: true, description: "Rummages your vault to save items NOTE: must be standing by your open vault." },
        { name: 'storage_box', regex: /storage_box/i, optional: true, description: "Rummages caravan storage box for items." },
        { name: 'family_vault', regex: /family_vault/i, optional: true, description: "Rummages your family vault to save items NOTE: must be standing by your open vault." },
        { name: 'register', regex: /register/i, optional: true, description: "Reads contents of deed register." },
        { name: 'servant', regex: /servant/i, optional: true, description: "Casts PG to read contents of your shadow servant." },
        { name: 'eddy', regex: /eddy/i, optional: true, description: "Save the contents of an eddy (HE 436 Gift)." }
      ],
      [
        { name: 'search', regex: /search/i, description: 'Start a search across all characters for specified item.' },
        { name: 'item', regex: /\w+/i, optional: false, description: 'Item to find.' },
        { name: 'player', regex: /\w+/, optional: true, description: 'Optional character name from which to source inventory information' }
      ],
      [
        { name: 'list', regex: /list/i, description: "Print out a list of names in the database." },
        { name: 'name', regex: /\w+/i, optional: true, description: "List full inventory for specified character. (Can spam!)" }
      ],
      [
        { name: 'remove', regex: /remove/i, description: "Remove character's inventory." },
        { name: 'name', regex: /\w+/i, optional: false, description: 'Character to remove.' }
      ]
    ]

    args = parse_args(arg_definitions)

    setup
    # Using this to clean up old data that might remain from before this version
    ['(eddy)', '(register)', '(vault)', '(caravan_box)', '(Family)'].each do |entry_name|
      remove_previous_entries(entry_name)
    end

    if args.vault_book
      add_vault_book_inv
    elsif args.vault_regular
      add_container_inventory('Personal Vault', 'vault')
      add_container_inventory('Vault Shelf', 'shelf', 'on ')
    elsif args.family_vault
      add_container_inventory('Family Vault', 'vault')
    elsif args.register
      add_register_inv
    elsif args.eddy
      add_container_inventory('Eddy Portal', 'watery portal', 'my ')
    elsif args.storage_box
      add_container_inventory('Caravan Box', 'storage box')
    elsif args.servant
      add_servant_inv
    elsif args.save
      add_current_inv
    elsif args.count
      get_inv_count(args.desc, args.player)
    elsif args.remove
      remove_character_data(args.name)
    elsif args.player
      search_person_for_item(args.item, args.player)
    elsif args.search
      search_for_item(args.item)
    elsif args.list
      list_character_inv(args.name)
    else
      DRC.message 'Type ;inventory-manager help for a usage guide'
    end
  end

  def setup
    @item_data = {}

    if !File.exist?(@item_db_path)
      File.open(@item_db_path, "w") {}
      @item_data = OpenStruct.new(YAML.load_file(@item_db_path)).to_h
    end

    if !File.exist?(@item_db_path)
      DRC.message "Something very wrong is occuring. You don't have a file to open and I can't create one!"
      DRC.message "item-db saves the file to: /lich/scripts/itemDB/inventory.yaml"
      exit
    end

    @item_data = OpenStruct.new(YAML.load_file(@item_db_path)).to_h
  end

  def remove_previous_entries(location_tag)
    if @item_data[@active_character]
      @item_data[@active_character].reject! { |line| line.include? location_tag }
    else
      @item_data[@active_character] = []
    end
  end

  def get_contents_of(container, preposition = nil)
    rummage_success_patterns = DRCI.class_variable_get(:@@rummage_success_patterns) << /^You rummage around on .* and see (.*)\./
    rummage_failure_patterns = DRCI.class_variable_get(:@@rummage_failure_patterns)
    container_is_closed_patterns = DRCI.class_variable_get(:@@container_is_closed_patterns)

    # so this is a special problem as a result of how common-items handles rummaging.
    contents = DRC.bput("rummage #{preposition}#{container}", container_is_closed_patterns, rummage_success_patterns, rummage_failure_patterns)
    case contents
    when *rummage_failure_patterns
      return nil
    when *container_is_closed_patterns
      return nil unless DRCI.open_container?(container)

      get_contents_of(container, preposition)
    else
      # Get string of just the comma separated item list
      contents = contents.match(/You rummage (?:around on|through) .* and see (?<items>.*)\./)[:items]

      # Split at a, an, or some, but only when it follows a comma
      # The last two items in the rummage list are never comma delimited, handle shortly
      contents = contents.split(/, (?:a|an|some) /)

      # Grab the last array element which is the final two items that are never comma
      # delimited in game output, split them into their item descriptions
      sub_contents = contents.pop.split(/ and (?:a|an|some) /)

      # Tack those last two items back onto our item list array
      contents + sub_contents
    end
  end

  def get_inv_count(desc)
    count, closed = 0, 0
    # Counting all items in inventory
    if desc.nil?
      DRC.bput('inv list', 'You have:')
      while (line = get)
        break if line =~ /INVENTORY HELP/i

        count += 1
        closed += 1 if line.match?(/(closed)/)
      end
      DRC.message "You have #{count} items, #{closed} of which are (closed) containers."
    elsif player
      search_person_for_item(desc, player)
    else
      search_for_item(desc)
    end
  end

  def add_vault_book_inv
    return unless DRCI.get_item?('vault book')

    remove_previous_entries('(Personal Vault)')

    DRC.bput('read my vault book', 'Vault Inventory:')
    while (line = get)
      break if line =~ /The last note/i

      item = line.lstrip.concat(' (Personal Vault)')
      @item_data[@active_character] << item
    end

    DRC.bput('stow my vault book', 'You put')

    DRC.message "Saving vault data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
  end

  def add_current_inv
    remove_previous_entries('(worn)')
    remove_previous_entries('(in container)')
    remove_previous_entries('(Eddy Portal)')

    DRC.bput('inv list', 'You have:')
    while (line = get)
      break if line =~ /\[Use INVENTORY HELP/i

      item = line.lstrip
      if item[0].eql? '-'
        item[0] = ''
        item.concat(' (in container)')
      else
        item.concat(' (worn)')
      end
      @item_data[@active_character] << item
    end

    DRC.message "Saving inventory data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
  end

  def add_register_inv
    return unless DRCI.get_item?('register')

    remove_previous_entries('(Deed Register)')

    DRC.bput("turn my register to contents", 'You flip your deed register', 'already at the table of contents')

    case DRC.bput("read my register", 'Stored Deeds', 'stored any deeds in this register')
    when 'stored any deeds in this register'
      exit
    when 'Stored Deeds'
      while (line = get)
        break if line =~ /Currently stored/i

        item = line.lstrip.concat(' (Deed Register)')
        @item_data[@active_character] << item
      end
    end

    DRCI.stow_item?('register')

    DRC.message "Saving register data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
  end

  def add_servant_inv
    return DRC.message "You do not know the spell Piercing Gaze. Do you even moonie?" unless DRSpells.known_spells['Piercing Gaze']

    remove_previous_entries('(Shadow Servant)')
    pg_prep = get_settings.waggle_sets['inventorypg']['Piercing Gaze']

    if pg_prep
      DRCA.prepare?(pg_prep['abbrev'], pg_prep['mana'])
      sleep pg_prep['prep_time'] || 15
    else
      pg_pause = [300 / DRSkill.getrank("Utility") + 1, 5].min
      DRCA.prepare?('pg', 5)
      sleep pg_pause
    end

    case DRC.bput('cast servant', 'Within the belly', 'The center of your vision', 'backfires')
    when 'The center of your vision'
      DRC.message "Your servant is not present. Summon it and retry."
    when 'backfires'
      DRC.message "Something is preventing your Piercing Gaze cast, exiting."
    when 'Within the belly'
      while (line = get)
        break if line =~ /Your servant/i

        item = line.lstrip.concat(' (Shadow Servant)')
        @item_data[@active_character] << item
      end

      DRC.message "Saving shadow servant data for #{@active_character}!"
      UserVars.servant_last_updated = Time.now
      File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
    end
  end

  def add_container_inventory(proper_name, interact_name, preposition = nil)
    remove_previous_entries("(#{proper_name})")

    using_sorter = false
    if Script.running?('sorter')
      stop_script('sorter')
      using_sorter = true
    end

    contents = get_contents_of(interact_name, preposition)

    contents.each do |item|
      @item_data[@active_character] << item.strip.concat(" (#{proper_name})").tr('.', '')
    end

    DRC.message "Saving #{proper_name} data for #{@active_character}!"
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
    if using_sorter
      start_script('sorter') unless Script.running?('sorter')
    end
  end

  def list_character_inv(name)
    if name.nil?
      DRC.message "There is inventory data for:"
      @item_data.each do |k, v|
        inv_count = 0
        v.each do |_data|
          inv_count += 1
        end
        DRC.message "#{k} - #{inv_count}"
      end
      return
    end

    return DRC.message("No data found for #{name.capitalize}") unless @item_data[name.capitalize.to_sym]

    DRC.message "Inventory for #{name.capitalize}"
    @item_data[name.capitalize.to_sym].each { |item| DRC.message "   - #{item}" }
  end

  def search_person_for_item(item, player)
    return DRC.message("No data found for #{player.capitalize}") unless @item_data[player.capitalize.to_sym]

    total_found = 0
    @item_data[player.capitalize.to_sym].each do |data|
      if data =~ /#{item}/i
        total_found += 1
        DRC.message "Match: #{data}"
      end
    end
    DRC.message "Found #{total_found} matches on #{player.capitalize}"
  end

  def search_for_item(item)
    total_found = 0
    @item_data.each do |k, v|
      total_found = 0
      DRC.message "Checking #{k}:"
      v.each { |data|
        if data.include?(item)
          total_found += 1
          DRC.message "Match #{total_found}): #{data}"
        end
      }
      DRC.message "Found #{total_found} matches on #{k}\n"
    end
  end

  def remove_character_data(name)
    @item_data.delete(name.capitalize.to_sym)
    File.open(@item_db_path, 'w') { |file| file.write(@item_data.to_yaml) }
    DRC.message "Removed #{name.capitalize}'s data!"
  end
end

InventoryManager.new
