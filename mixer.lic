custom_require.call(%w[common])

class Mixer
    def initialize
      metals = %w[covellite coal lead pewter bronze iron lcs mcs hcs brass nickel tin zinc gold copper oravir silver platinum animite damite darkstone electrum glaes haralun kertig lumium muracite niniam coralite kelpzyte kiralan loimic tyrium vardite haledroth audrualm silversteel kadepa quelium agonite icesteel iomiek telothian orichalcum niello indurium]
      arg_definitions = [[
          { name: 'metal1', display: 'Primary Metal', options: metals, description: 'Name of primary metal in the mix (eg damite)' },
          { name: 'perc', display: 'Primary Percentage', regex: /\d+%/, optional: true, description: 'Percentage of primary metal in the mix (eg 65%)' },
          { name: 'metal2', display: 'Secondary Metal', options: metals, optional: true, description: 'Name of secondary metal in the mix (eg gold)' }
          # { name: 'target', display: 'Target density', regex: /[0-9.0-9]/, optional: true, description: 'Target density, number (eg 4.3) '},
        ],
        [
          { name: 'metal1', display: 'Primary Metal', options: metals, description: 'Name of primary metal in the mix (eg damite)' },
          { name: 'minmax', display: 'Min or Max density', options: %w[min max], optional: true, description: 'Minimum or maximum density (min or max)'},
          { name: 'volume', display: 'Volumes', regex: /\d+v/, optional: true, description: 'Total volumes of the ingot' }
        ],
        [
          {name: 'magic_ingot', display: 'magic_ingot', regex: /magic_ingot/i, description: 'Creates a magic ingot with the materials defined' },
          {name: 'metal1', display: 'Primary Metal', options: metals, description: 'Metal you want the magic ingot made for' },
          {name: 'metal2', display: 'Secondary Metal', options: metals, description: 'Metal used for density' },
          {name: 'secondary_volume', display: 'Secondary Volume', regex: /\d+/, optional: true, description: 'Number (1-99) of density metal' },
          {name: 'tertiary_volume', display: 'Tertiary Volume', regex: /\d+/, optinoal: true, description: 'Number (1-98) of additional density metal' }
        ],
        [
          {name: 'base_metal', display: 'magic ingot volume', options: metals },
          {name: 'metal2', display: 'Second Metal', options: metals },
          {name: 'vol2', display: 'Second Volume', regex: /\d+/ },
          {name: 'metal3', display: 'Third Metal', options: metals, optional: true },
          {name: 'vol3', display: 'Third Volume', regex: /\d+/, optional: true }
        ]
      ]
      args = parse_args(arg_definitions)
      data
      if args.magic_ingot
        DRC.message("Not yet implemented")
      elsif args.base_metal
        calc_magic_ingot(args.base_metal, args.metal2, args.vol2.to_i, args.metal3, args.vol3.to_i)
      elsif args.perc
        primary_percentage = args.perc ? args.perc.sub!('%','').to_i : 67
        calc_result(args.metal1, args.metal2, primary_percentage)
      elsif args.minmax        
        metal2 = args.minmax == 'min' ? 'oravir' : 'gold'
        calc_result(args.metal1, metal2, 67)
      else
        display_attributes(@metals_hash[args.metal1])
      end
    end

    def calc_result(metal1, metal2, primary_percentage)
      if primary_percentage >= 67
        @metals_hash[metal1][8] = @metals_hash[metal1][8]*(primary_percentage/100.to_f) + @metals_hash[metal2][8]*((100-primary_percentage)/100.to_f)
        display_attributes(@metals_hash[metal1])
      else
        p_stats,s_stats = [],[]
        p_stats = @metals_hash[metal1].map { |val| val*(primary_percentage/100.to_f) }
        echo((100-primary_percentage))
        s_stats = @metals_hash[metal2].map { |val| val*((100-primary_percentage)/100.to_f) }
        echo(p_stats,s_stats)
        display_attributes([p_stats,s_stats].transpose.map(&:sum))
      end
    end

    def calc_magic_ingot(base, metal2, vol2, metal3 = false, vol3 = false)
      stat1 = @metals_hash[base][8]*0.01.to_f # 1% of the target metal for the magic ingot, representing 1 volume
      echo stat1
      stat2 = @metals_hash[metal2][8]*(vol2/100.to_f) # % of second metal's volume, representing % in the final ingot
      echo stat2
      if metal3
        stat3 = @metals_hash[metal3][8]*(vol3/100.to_f) # % of third metal's volume, representing % of the final ingot
        DRC.message("Magic Ingot density: #{stat1+stat2+stat3}")
        DRC.message("Mixed (2:1) ingot density using this ingot: #{@metals_hash[base][8]*0.66 + (stat1+stat2+stat3)*0.33}")
      else        
        DRC.message("Magic Ingot density: #{stat1+stat2}")
        DRC.message("Mixed (2:1) ingot density using this ingot: #{@metals_hash[base][8]*0.66 + (stat1+stat2)*0.33}")
      end
    end

    def display_attributes(metal)
        info = Hash[@attributes_array.zip metal]
        info.each do |name,value|
          DRC.message("#{name}:#{value.round(2)}")
        end
    end

    def data
      @attributes_array = ['hardness','durability','workability','electrical','thermal','physical','ductility','capacity','density','value']
      @metals_hash = {
          "covellite"=>[35,80,65,25,85,80,80,30,2,62],
          "coal"=>[5,5,50,80,80,5,1,15,1,1],
          "lead"=>[20,30,80,40,70,20,75,30,8,50],
          "pewter"=>[25,45,70,40,70,25,30,50,5,275],
          "bronze"=>[80,65,70,35,55,80,85,40,6.2,125],
          "iron"=>[70,40,50,30,50,75,50,25,5,125],
          "lcs"=>[80,80,40,30,50,80,10,5,5,250],
          "mcs"=>[85,60,50,30,50,85,20,5,5,187],
          "hcs"=>[90,25,35,30,50,90,20,5,5,250],
          "brass"=>[40,25,60,30,40,40,90,28,5,8150],
          "nickel"=>[25,15,50,30,25,25,90,30,6,100],
          "tin"=>[25,75,40,35,25,25,80,50,3,37],
          "zinc"=>[25,20,60,50,25,25,75,45,4,87],
          "gold"=>[10,20,40,15,15,10,80,50,9,6250],
          "copper"=>[25,40,70,10,15,25,80,30,7,125],
          "oravir"=>[40,20,70,95,15,25,15,50,1,50],
          "silver"=>[15,25,50,5,10,15,75,50,8,2500],
          "platinum"=>[20,15,20,30,10,20,85,50,9,12500],
          "animite"=>[15,10,10,65,65,15,90,50,4,43750],
          "damite"=>[80,70,10,90,40,95,25,4,6,13750],
          "darkstone"=>[85,50,75,70,35,75,20,50,5.1,875],
          "electrum"=>[20,20,30,20,20,20,80,55,8,5625],
          "glaes"=>[95,50,10,60,40,75,95,10,4,16250],
          "haralun"=>[95,60,20,70,75,80,90,5,8,13750],
          "kertig"=>[95,70,5,40,55,90,90,6,7,16250],
          "lumium"=>[75,50,15,60,75,90,90,12,3,6500],
          "muracite"=>[70,55,70,55,55,85,85,50,4.7,1125],
          "niniam"=>[80,70,20,75,75,70,90,60,5,6250],
          "coralite"=>[99,65,40,40,99,99,35,6,5.9,1000000],
          "kelpzyte"=>[99,75,38,60,80,99,35,5,3.5,63750],
          "kiralan"=>[70,80,35,90,80,99,12,4,7,67650],
          "loimic"=>[99,70,35,99,40,99,20,7,3.5,0],
          "tyrium"=>[99,80,40,70,70,99,40,4,6,62500],
          "vardite"=>[88,75,45,80,45,99,30,4,6.1,27500],
          "haledroth"=>[96,75,35,15,20,97,95,6,6.2,0],
          "audrualm"=>[92,40,5,55,90,95,85,7,3,15000],
          "silversteel"=>[95,90,2,20,80,95,90,10,2.2,27500],
          "kadepa"=>[85,80,95,40,80,94,90,12,5.2,20625],
          "quelium"=>[92,20,45,65,65,92,90,20,7.2,18750],
          "agonite"=>[95,65,75,20,99,85,90,5,7.5,0],
          "icesteel"=>[90,75,20,80,95,85,95,40,4.5,25000],
          "iomiek"=>[80,45,40,35,55,70,80,75,5,0],
          "telothian"=>[104,80,25,90,70,45,90,5,6.4,0],
          "orichalcum"=>[30,50,10,40,40,30,35,80,6,17500],
          "niello"=>[5,5,15,85,25,25,40,60,8,21136],
          "indurium"=>[82,64,50,12,34,22,20,70,3.9,47500]
          }
    end

end

Mixer.new
