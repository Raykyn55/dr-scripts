=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#locksmithing
=end

custom_require.call(%w[common common-items equipmanager])

class Locksmithing
  def initialize
    arg_definitions = [
      [
        { name: 'once', regex: /once/i, optional: true, description: 'Pick a trainer once' }
      ]
    ]

    args                    = parse_args(arg_definitions)
    settings                = get_settings
    @equipment_manager      = EquipmentManager.new(settings)
    @daily_trainers         = settings.training_box_list
    @worn_lockbox           = settings.training_boxes_are_worn
    @consumable_lockboxes   = settings.consumable_lockbox_list || ['jewelry box', 'keepsake box']
    @liveboxes              = settings.pick_live_boxes
    @consumable_container   = settings.burgle_settings['loot_container']
    @use_lockpick_ring      = settings.use_lockpick_ring
    @lockpick_container     = settings.lockpick_container
    @sell_loot              = settings.sell_loot
    @safe_room              = settings.safe_room
    @worn_trashcan          = settings.worn_trashcan
    @worn_trashcan_verb     = settings.worn_trashcan_verb
    @pick_once              = args.once

    pick_once if @pick_once
    live_boxes if @liveboxes

    start_script('performance', ['noclean']) unless Script.running?('performance')
    pause 3
    @equipment_manager.empty_hands
    DRCI.get_item_if_not_held?('lockpick', @lockpick_container) unless @use_lockpick_ring
    lock_box_trainers
    DRCI.put_away_item?('lockpick', @lockpick_container) unless @use_lockpick_ring
  end

  def pick_once
    exit if checkright =~ /bow|sling|arbalest/
    if checkright && checkleft
      temp = checkleft
      DRCI.lower_item?(temp)
    end
    lock_box_trainers
    DRCI.lift? if temp
    exit
  end

  def live_boxes
    DRCT.walk_to(@safe_room)
    DRC.wait_for_script_to_complete('pick') if @liveboxes
    DRC.wait_for_script_to_complete('sell-loot') if @sell_loot
    exit unless DRSkill.getxp('Locksmithing') < 34
    DRCT.walk_to(@safe_room)
  end

  def lock_box_trainers
    @consumable_lockboxes.each do |box|
      break if @once_picked_twice_shy

      while DRSkill.getxp('Locksmithing') < 34 && !@once_picked_twice_shy && DRCI.get_item?(box, @consumable_container)
        pick_box(box)
        DRCI.put_away_item?(box, @consumable_container) if DRCI.in_hands?(box)
      end
    end

    return if @once_picked_twice_shy
    return unless @daily_trainers

    @daily_trainers.each do |box|
      break if @once_picked_twice_shy

      @ords = $ORDINALS.dup
      while DRSkill.getxp('Locksmithing') < 34 && !@once_picked_twice_shy && (DRCI.remove_item?(box) || DRCI.get_item?(box))
        pick_box(box)
        DRCI.wear_item?(box) if @worn_lockbox
        DRCI.put_away_item?(box, @bag) if DRCI.in_hands?(box)
      end
    end
  end

  def pick_box(trainer)
    while (DRSkill.getxp('Locksmithing') < 34 && DRC.right_hand)
      if @pick_once
        DRC.retreat
        fput 'engage'
      end
      case DRC.bput("pick my #{trainer}", 'Maybe you should close', 'not making any progress', "why bother", "it opens.", "isn't locked", 'The lock feels warm', 'The lock looks weak', 'Pick what', 'You need some type of tool to pick', "But you aren't holding")
      when /You need some type of tool to pick/
        DRC.message('YOU HAVE NO LOCKPICKS ON YOUR LOCKPICK RING/BELT.  SORT THAT OUT!')
        exit
      when /(you should close)|(isn't locked)/
        DRC.bput("close my #{trainer}", 'You close', 'already closed', "You can't close that")
        DRC.bput("lock my #{trainer}", 'You quickly lock', 'already locked')
      when /it opens/
        @once_picked_twice_shy = @pick_once
        DRC.bput("close my #{trainer}", 'You close', 'already closed', "You can't close that")
        DRC.bput("lock my #{trainer}", 'You quickly lock', 'already locked')
      when /The lock feels warm/
        DRC.message('Charges Burned, moving on.')
      when /The lock looks weak/
        case DRC.bput("study my #{trainer}", /0 more times/, /risk breaking the lock/, 'Study what')
        when /0 more times/
          DRCI.dispose_trash(trainer, @worn_trashcan, @worn_trashcan_verb)
        end
      when /But you aren't holding/
        DRC.message("Description: '#{trainer}' may not be specific enough or is in a wrong container - something is interfering.")
        exit
      when /why bother/
        DRC.message("The #{trainer} is not a valid option but shares a noun - move it out of your burgle bag to avoid hangups.")
      end
      break if @once_picked_twice_shy
    end
  end

  before_dying do
    kill_script('performance') if running?('performance')
  end
end

Locksmithing.new
